<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Life Skills Tree</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
            color: #ffffff;
            min-height: 100vh;
            overflow-x: auto;
        }

        .header {
            text-align: center;
            padding: 2rem;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-bottom: 2px solid rgba(255, 215, 0, 0.3);
        }

        .header h1 {
            font-size: 2.5rem;
            background: linear-gradient(45deg, #ffd700, #ffed4e);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 0.5rem;
        }

        .stats {
            display: flex;
            justify-content: center;
            gap: 2rem;
            margin-top: 1rem;
        }

        .stat {
            text-align: center;
        }

        .stat-number {
            font-size: 1.5rem;
            font-weight: bold;
            color: #ffd700;
        }

        .skill-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 2rem;
            padding: 2rem;
            max-width: 1400px;
            margin: 0 auto;
        }

        .skill-category {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 1.5rem;
            border: 2px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }

        .skill-category:hover {
            transform: translateY(-5px);
            border-color: rgba(255, 215, 0, 0.5);
            box-shadow: 0 10px 30px rgba(255, 215, 0, 0.2);
        }

        .category-header {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
        }

        .category-icon {
            font-size: 2rem;
            margin-right: 1rem;
        }

        .category-title {
            font-size: 1.3rem;
            font-weight: bold;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 4px;
            margin: 1rem 0;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #ffd700, #ffed4e);
            transition: width 0.5s ease;
        }

        .skills-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 1rem;
        }

        .skill-node {
            aspect-ratio: 1;
            border-radius: 50%;
            border: 3px solid #444;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .skill-node:hover {
            transform: scale(1.05);
        }

        .skill-node.unlocked {
            border-color: #ffd700;
            background: linear-gradient(135deg, rgba(255, 215, 0, 0.3), rgba(255, 237, 78, 0.2));
            box-shadow: 0 0 20px rgba(255, 215, 0, 0.4);
        }

        .skill-node.completed {
            border-color: #00ff88;
            background: linear-gradient(135deg, rgba(0, 255, 136, 0.3), rgba(0, 200, 100, 0.2));
            box-shadow: 0 0 20px rgba(0, 255, 136, 0.4);
        }

        .skill-icon {
            font-size: 1.5rem;
            margin-bottom: 0.25rem;
        }

        .skill-name {
            font-size: 0.7rem;
            text-align: center;
            font-weight: bold;
        }

        .achievement-popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(20px);
            border: 2px solid #ffd700;
            border-radius: 15px;
            padding: 2rem;
            z-index: 1000;
            display: none;
            text-align: center;
            animation: popupShow 0.3s ease;
        }

        @keyframes popupShow {
            from { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
            to { opacity: 1; transform: translate(-50%, -50%) scale(1); }
        }

        .popup-title {
            font-size: 1.5rem;
            color: #ffd700;
            margin-bottom: 1rem;
        }

        .close-popup {
            background: #ffd700;
            color: #000;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 25px;
            cursor: pointer;
            font-weight: bold;
            margin-top: 1rem;
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 999;
            display: none;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🌟 Life Skills Tree 🌟</h1>
        <p>Track your journey through life's accomplishments</p>
        <div class="stats">
            <div class="stat">
                <div class="stat-number" id="totalSkills">0</div>
                <div>Total Skills</div>
            </div>
            <div class="stat">
                <div class="stat-number" id="completedSkills">0</div>
                <div>Completed</div>
            </div>
            <div class="stat">
                <div class="stat-number" id="overallProgress">0%</div>
                <div>Progress</div>
            </div>
        </div>
    </div>

    <div class="skill-container" id="skillContainer">
        <!-- Skills will be dynamically generated here -->
    </div>

    <div class="overlay" id="overlay"></div>
    <div class="achievement-popup" id="achievementPopup">
        <div class="popup-title">🎉 Achievement Unlocked! 🎉</div>
        <div id="achievementText"></div>
        <button class="close-popup" onclick="closePopup()">Awesome!</button>
    </div>

    <script>
        const skillData = {
            'Physical Health': {
                icon: '💪',
                skills: [
                    {name: 'First Workout', icon: '🏃', description: 'Complete your first workout session'},
                    {name: 'Week Streak', icon: '📅', description: 'Exercise for 7 consecutive days'},
                    {name: 'Marathon Ready', icon: '🏃‍♂️', description: 'Run a full marathon'},
                    {name: 'Strength Goal', icon: '🏋️', description: 'Reach your strength training goal'},
                    {name: 'Flexibility', icon: '🧘', description: 'Master basic yoga poses'},
                    {name: 'Healthy Habits', icon: '🥗', description: 'Maintain healthy eating for a month'}
                ]
            },
            'Mental Wellness': {
                icon: '🧠',
                skills: [
                    {name: 'Meditation Start', icon: '🧘‍♀️', description: 'Complete first meditation session'},
                    {name: 'Mindful Week', icon: '☮️', description: 'Practice mindfulness for 7 days'},
                    {name: 'Stress Master', icon: '😌', description: 'Learn stress management techniques'},
                    {name: 'Sleep Schedule', icon: '😴', description: 'Maintain consistent sleep for 2 weeks'},
                    {name: 'Journal Habit', icon: '📔', description: 'Journal daily for a month'},
                    {name: 'Digital Detox', icon: '📵', description: 'Complete a 24-hour digital detox'}
                ]
            },
            'Learning & Growth': {
                icon: '📚',
                skills: [
                    {name: 'New Language', icon: '🗣️', description: 'Learn basic phrases in a new language'},
                    {name: 'Book Club', icon: '📖', description: 'Read 12 books in a year'},
                    {name: 'Online Course', icon: '💻', description: 'Complete an online course'},
                    {name: 'Skill Mastery', icon: '🎯', description: 'Master a new professional skill'},
                    {name: 'Creative Project', icon: '🎨', description: 'Complete a creative project'},
                    {name: 'Teaching Others', icon: '👨‍🏫', description: 'Teach someone else a skill'}
                ]
            },
            'Social & Relationships': {
                icon: '👥',
                skills: [
                    {name: 'New Friend', icon: '🤝', description: 'Make a new meaningful friendship'},
                    {name: 'Family Time', icon: '👨‍👩‍👧‍👦', description: 'Spend quality time with family weekly'},
                    {name: 'Community Help', icon: '🤲', description: 'Volunteer in your community'},
                    {name: 'Mentor Role', icon: '👨‍🎓', description: 'Become a mentor to someone'},
                    {name: 'Network Builder', icon: '🌐', description: 'Build professional network'},
                    {name: 'Conflict Resolution', icon: '☮️', description: 'Successfully resolve a conflict'}
                ]
            },
            'Financial Literacy': {
                icon: '💰',
                skills: [
                    {name: 'Budget Master', icon: '📊', description: 'Create and follow a monthly budget'},
                    {name: 'Emergency Fund', icon: '🛡️', description: 'Build 3-month emergency fund'},
                    {name: 'Investment Start', icon: '📈', description: 'Make your first investment'},
                    {name: 'Debt Free', icon: '🆓', description: 'Pay off all consumer debt'},
                    {name: 'Side Hustle', icon: '💼', description: 'Start a profitable side business'},
                    {name: 'Financial Goals', icon: '🎯', description: 'Achieve major financial milestone'}
                ]
            },
            'Life Skills': {
                icon: '🏡',
                skills: [
                    {name: 'Cooking Basics', icon: '👨‍🍳', description: 'Master 10 basic recipes'},
                    {name: 'Home Repair', icon: '🔧', description: 'Learn basic home maintenance'},
                    {name: 'Time Management', icon: '⏰', description: 'Master productivity system'},
                    {name: 'Public Speaking', icon: '🎤', description: 'Give a confident public presentation'},
                    {name: 'First Aid', icon: '🚑', description: 'Get certified in first aid/CPR'},
                    {name: 'Life Organization', icon: '📋', description: 'Organize all areas of life'}
                ]
            }
        };

        let skillStates = {};

        function initializeSkills() {
            const container = document.getElementById('skillContainer');
            
            Object.entries(skillData).forEach(([category, data]) => {
                const categoryDiv = document.createElement('div');
                categoryDiv.className = 'skill-category';
                
                const progress = calculateCategoryProgress(category);
                
                const sanitizedId = category.replace(/[^a-zA-Z0-9]/g, '');
                
                categoryDiv.innerHTML = `
                    <div class="category-header">
                        <div class="category-icon">${data.icon}</div>
                        <div class="category-title">${category}</div>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${progress}%"></div>
                    </div>
                    <div class="skills-grid" id="${sanitizedId}Grid">
                    </div>
                `;
                
                container.appendChild(categoryDiv);
                
                const skillsGrid = document.getElementById(sanitizedId + 'Grid');
                
                data.skills.forEach((skill, index) => {
                    const skillKey = `${category}-${skill.name}`;
                    if (!skillStates[skillKey]) {
                        skillStates[skillKey] = 'locked';
                    }
                    
                    const skillNode = document.createElement('div');
                    skillNode.className = `skill-node ${skillStates[skillKey]}`;
                    skillNode.innerHTML = `
                        <div class="skill-icon">${skill.icon}</div>
                        <div class="skill-name">${skill.name}</div>
                    `;
                    
                    skillNode.addEventListener('click', () => toggleSkill(skillKey, skill.description));
                    skillsGrid.appendChild(skillNode);
                });
            });
            
            updateStats();
        }

        function toggleSkill(skillKey, description) {
            const currentState = skillStates[skillKey];
            
            if (currentState === 'locked') {
                skillStates[skillKey] = 'unlocked';
                showAchievement(`Started: ${skillKey.split('-')[1]}`, description);
            } else if (currentState === 'unlocked') {
                skillStates[skillKey] = 'completed';
                showAchievement(`Completed: ${skillKey.split('-')[1]}`, 'Congratulations on completing this skill!');
            } else {
                skillStates[skillKey] = 'locked';
            }
            
            updateSkillDisplay();
            updateStats();
            updateProgressBars();
        }

        function updateSkillDisplay() {
            Object.entries(skillStates).forEach(([skillKey, state]) => {
                const skillNodes = document.querySelectorAll('.skill-node');
                skillNodes.forEach(node => {
                    if (node.querySelector('.skill-name').textContent === skillKey.split('-')[1]) {
                        node.className = `skill-node ${state}`;
                    }
                });
            });
        }

        function calculateCategoryProgress(category) {
            const categorySkills = skillData[category].skills;
            const completedCount = categorySkills.filter(skill => {
                const skillKey = `${category}-${skill.name}`;
                return skillStates[skillKey] === 'completed';
            }).length;
            
            return Math.round((completedCount / categorySkills.length) * 100);
        }

        function updateProgressBars() {
            Object.keys(skillData).forEach(category => {
                const sanitizedId = category.replace(/[^a-zA-Z0-9]/g, '');
                const progressBar = document.querySelector(`#${sanitizedId}Grid`).parentElement.querySelector('.progress-fill');
                const progress = calculateCategoryProgress(category);
                progressBar.style.width = `${progress}%`;
            });
        }

        function updateStats() {
            const totalSkills = Object.keys(skillStates).length;
            const completedSkills = Object.values(skillStates).filter(state => state === 'completed').length;
            const overallProgress = totalSkills > 0 ? Math.round((completedSkills / totalSkills) * 100) : 0;
            
            document.getElementById('totalSkills').textContent = totalSkills;
            document.getElementById('completedSkills').textContent = completedSkills;
            document.getElementById('overallProgress').textContent = `${overallProgress}%`;
        }

        function showAchievement(title, description) {
            document.getElementById('achievementText').innerHTML = `
                <h3>${title}</h3>
                <p>${description}</p>
            `;
            document.getElementById('overlay').style.display = 'block';
            document.getElementById('achievementPopup').style.display = 'block';
        }

        function closePopup() {
            document.getElementById('overlay').style.display = 'none';
            document.getElementById('achievementPopup').style.display = 'none';
        }

        // Close popup when clicking overlay
        document.getElementById('overlay').addEventListener('click', closePopup);

        // Initialize the skill tree
        initializeSkills();
    </script>
</body>
</html>
