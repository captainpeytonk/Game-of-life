<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Skill Tree</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            color: white;
        }

        .header h1 {
            font-size: 3em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .back-btn {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(255,255,255,0.2);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        .back-btn:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-2px);
        }

        .categories {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-bottom: 40px;
        }

        .category-card {
            background: rgba(255,255,255,0.95);
            border-radius: 20px;
            padding: 30px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            backdrop-filter: blur(10px);
        }

        .category-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.3);
        }

        .category-card h2 {
            font-size: 2em;
            margin-bottom: 15px;
            color: #4a5568;
        }

        .category-level {
            font-size: 1.5em;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 10px;
        }

        .category-exp {
            color: #666;
            font-size: 1.1em;
        }

        .skills-page {
            display: none;
        }

        .skills-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
        }

        .skill-card {
            background: rgba(255,255,255,0.95);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            transition: all 0.3s ease;
        }

        .skill-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.2);
        }

        .skill-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            cursor: pointer;
        }

        .skill-title {
            font-size: 1.4em;
            font-weight: bold;
            color: #4a5568;
        }

        .skill-level {
            background: #667eea;
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
        }

        .skill-exp {
            font-size: 0.9em;
            color: #666;
            margin-bottom: 15px;
        }

        .exp-bar {
            background: #e2e8f0;
            height: 8px;
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 15px;
        }

        .exp-fill {
            background: linear-gradient(90deg, #667eea, #764ba2);
            height: 100%;
            transition: width 0.5s ease;
        }

        .sub-skills {
            display: none;
            margin-top: 15px;
        }

        .sub-skills.expanded {
            display: block;
        }

        .sub-skill {
            display: flex;
            align-items: center;
            padding: 10px;
            margin: 5px 0;
            background: #f7fafc;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .sub-skill:hover {
            background: #edf2f7;
        }

        .sub-skill input[type="checkbox"] {
            margin-right: 10px;
            transform: scale(1.2);
        }

        .sub-skill label {
            flex: 1;
            cursor: pointer;
        }

        .sub-skill-exp {
            color: #667eea;
            font-weight: bold;
            font-size: 0.9em;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            animation: modalPop 0.5s ease;
        }

        @keyframes modalPop {
            from { transform: translate(-50%, -50%) scale(0.8); opacity: 0; }
            to { transform: translate(-50%, -50%) scale(1); opacity: 1; }
        }

        .modal h2 {
            color: #667eea;
            font-size: 2em;
            margin-bottom: 15px;
        }

        .modal p {
            font-size: 1.2em;
            color: #4a5568;
            margin-bottom: 20px;
        }

        .modal button {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            font-size: 1.1em;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .modal button:hover {
            background: #5a67d8;
            transform: translateY(-2px);
        }

        .expand-icon {
            font-size: 1.2em;
            transition: transform 0.3s ease;
        }

        .expand-icon.rotated {
            transform: rotate(180deg);
        }
    </style>
</head>
<body>
    <div class="container">
        <button class="back-btn hidden" onclick="goBack()">‚Üê Back</button>
        
        <div class="header">
            <h1 id="page-title">Skill Tree</h1>
            <p id="page-subtitle">Choose a category to develop your abilities</p>
        </div>

        <!-- Main Categories View -->
        <div id="categories-view" class="categories-grid fade-in">
            <!-- Categories will be populated by JavaScript -->
        </div>

        <!-- Skills View -->
        <div id="skills-view" class="skills-container hidden">
            <div class="skills-grid" id="skills-grid">
                <!-- Skills will be populated by JavaScript -->
            </div>
        </div>
    </div>

    <script>
        // Skill tree data structure
        const skillTreeData = {
            'verbal-linguistic': {
                title: 'Verbal-Linguistic',
                icon: 'üìö',
                description: 'Master the art of words, language, and communication',
                skills: {
                    'reading': {
                        title: 'Reading',
                        buildingBlocks: [
                            'Read 10 books this year',
                            'Read a classic novel',
                            'Read non-fiction book',
                            'Read poetry collection',
                            'Speed reading techniques'
                        ]
                    },
                    'writing': {
                        title: 'Writing',
                        buildingBlocks: [
                            'Write daily journal',
                            'Complete a short story',
                            'Write a blog post',
                            'Learn essay structure',
                            'Creative writing exercises'
                        ]
                    },
                    'new-language': {
                        title: 'Learn a New Language',
                        subSkills: {
                            'japanese': {
                                title: 'Japanese',
                                buildingBlocks: [
                                    'Learn Hiragana',
                                    'Learn Katakana',
                                    'Learn 10 Kanji',
                                    'Learn 50 Kanji',
                                    'Learn 100 Kanji',
                                    'Read a story in Japanese',
                                    'Read a news article',
                                    'Have basic conversation',
                                    'Complete an online course',
                                    'Teach the Language'
                                ]
                            },
                            'french': {
                                title: 'French',
                                buildingBlocks: [
                                    'Learn basic pronunciation',
                                    'Master 100 common words',
                                    'Learn present tense verbs',
                                    'Practice daily conversations',
                                    'Read French children\'s book',
                                    'Watch French movie with subtitles'
                                ]
                            },
                            'spanish': {
                                title: 'Spanish',
                                buildingBlocks: [
                                    'Learn alphabet and sounds',
                                    'Master 200 vocabulary words',
                                    'Learn verb conjugations',
                                    'Practice pronunciation',
                                    'Have 10-minute conversation',
                                    'Read Spanish news article'
                                ]
                            }
                        }
                    },
                    'storytelling': {
                        title: 'Storytelling',
                        buildingBlocks: [
                            'Learn story structure',
                            'Practice character development',
                            'Tell story to audience',
                            'Use voice modulation',
                            'Master pacing techniques'
                        ]
                    },
                    'teaching': {
                        title: 'Teaching',
                        buildingBlocks: [
                            'Teach someone a skill',
                            'Create lesson plan',
                            'Practice public speaking',
                            'Learn different learning styles',
                            'Give constructive feedback'
                        ]
                    },
                    'acting': {
                        title: 'Acting',
                        buildingBlocks: [
                            'Practice basic emotions',
                            'Learn voice projection',
                            'Study method acting',
                            'Perform in front of mirror',
                            'Join acting class or group'
                        ]
                    }
                }
            },
            'mathematical-logical': {
                title: 'Mathematical-Logical',
                icon: 'üî¢',
                description: 'Develop analytical thinking and mathematical reasoning',
                skills: {
                    'basic-math': {
                        title: 'Basic Mathematics',
                        buildingBlocks: [
                            'Master multiplication tables',
                            'Practice mental arithmetic',
                            'Solve word problems',
                            'Learn fractions and decimals',
                            'Understand percentages'
                        ]
                    },
                    'programming': {
                        title: 'Programming',
                        buildingBlocks: [
                            'Learn a programming language',
                            'Build first application',
                            'Understand algorithms',
                            'Practice debugging',
                            'Complete coding challenges'
                        ]
                    },
                    'logic-puzzles': {
                        title: 'Logic Puzzles',
                        buildingBlocks: [
                            'Solve Sudoku puzzles',
                            'Complete logic grid puzzles',
                            'Master chess basics',
                            'Practice riddles',
                            'Learn strategic thinking'
                        ]
                    }
                }
            },
            'musical': {
                title: 'Musical',
                icon: 'üéµ',
                description: 'Explore rhythm, melody, and musical expression',
                skills: {
                    'instrument': {
                        title: 'Learn an Instrument',
                        subSkills: {
                            'piano': {
                                title: 'Piano',
                                buildingBlocks: [
                                    'Learn basic finger positions',
                                    'Practice scales',
                                    'Play simple melodies',
                                    'Learn to read sheet music',
                                    'Play a complete song'
                                ]
                            },
                            'guitar': {
                                title: 'Guitar',
                                buildingBlocks: [
                                    'Learn basic chords',
                                    'Practice strumming patterns',
                                    'Play simple songs',
                                    'Learn fingerpicking',
                                    'Write original chord progression'
                                ]
                            }
                        }
                    },
                    'music-theory': {
                        title: 'Music Theory',
                        buildingBlocks: [
                            'Learn note names',
                            'Understand scales',
                            'Study chord progressions',
                            'Learn rhythm patterns',
                            'Analyze song structures'
                        ]
                    }
                }
            },
            'visual-spatial': {
                title: 'Visual-Spatial',
                icon: 'üé®',
                description: 'Develop visual thinking and spatial awareness',
                skills: {
                    'drawing': {
                        title: 'Drawing',
                        buildingBlocks: [
                            'Practice basic shapes',
                            'Learn shading techniques',
                            'Draw from observation',
                            'Study proportions',
                            'Complete daily sketches'
                        ]
                    },
                    'photography': {
                        title: 'Photography',
                        buildingBlocks: [
                            'Learn composition rules',
                            'Understand lighting',
                            'Practice different angles',
                            'Edit photos',
                            'Create photo series'
                        ]
                    }
                }
            },
            'bodily-kinesthetic': {
                title: 'Bodily-Kinesthetic',
                icon: 'üèÉ',
                description: 'Master physical movement and body coordination',
                skills: {
                    'fitness': {
                        title: 'Physical Fitness',
                        buildingBlocks: [
                            'Exercise 30 minutes daily',
                            'Learn proper form',
                            'Increase flexibility',
                            'Build strength',
                            'Improve endurance'
                        ]
                    },
                    'sports': {
                        title: 'Sports Skills',
                        buildingBlocks: [
                            'Learn basic techniques',
                            'Practice regularly',
                            'Study game strategy',
                            'Play with others',
                            'Join team or league'
                        ]
                    }
                }
            },
            'interpersonal': {
                title: 'Interpersonal',
                icon: 'üë•',
                description: 'Build relationships and social understanding',
                skills: {
                    'communication': {
                        title: 'Communication',
                        buildingBlocks: [
                            'Practice active listening',
                            'Learn body language',
                            'Give clear instructions',
                            'Handle conflicts peacefully',
                            'Show empathy'
                        ]
                    },
                    'leadership': {
                        title: 'Leadership',
                        buildingBlocks: [
                            'Lead a small project',
                            'Practice delegation',
                            'Make group decisions',
                            'Motivate others',
                            'Give presentations'
                        ]
                    }
                }
            },
            'intrapersonal': {
                title: 'Intrapersonal',
                icon: 'üß†',
                description: 'Develop self-awareness and inner understanding',
                skills: {
                    'meditation': {
                        title: 'Meditation',
                        buildingBlocks: [
                            'Practice daily meditation',
                            'Learn breathing techniques',
                            'Develop mindfulness',
                            'Handle stress better',
                            'Increase focus'
                        ]
                    },
                    'self-reflection': {
                        title: 'Self-Reflection',
                        buildingBlocks: [
                            'Keep daily journal',
                            'Identify personal values',
                            'Set meaningful goals',
                            'Track progress',
                            'Celebrate achievements'
                        ]
                    }
                }
            },
            'naturalist': {
                title: 'Naturalist',
                icon: 'üå±',
                description: 'Connect with nature and understand living systems',
                skills: {
                    'gardening': {
                        title: 'Gardening',
                        buildingBlocks: [
                            'Plant seeds',
                            'Care for plants daily',
                            'Learn about soil',
                            'Study plant biology',
                            'Harvest crops'
                        ]
                    },
                    'wildlife': {
                        title: 'Wildlife Study',
                        buildingBlocks: [
                            'Identify local birds',
                            'Study animal behavior',
                            'Track seasonal changes',
                            'Create nature journal',
                            'Participate in citizen science'
                        ]
                    }
                }
            },
            'existential': {
                title: 'Existential',
                icon: 'ü§î',
                description: 'Explore meaning, purpose, and big questions',
                skills: {
                    'philosophy': {
                        title: 'Philosophy',
                        buildingBlocks: [
                            'Read philosophical texts',
                            'Question assumptions',
                            'Debate ethical issues',
                            'Study different worldviews',
                            'Develop personal philosophy'
                        ]
                    },
                    'spirituality': {
                        title: 'Spiritual Practice',
                        buildingBlocks: [
                            'Explore different traditions',
                            'Practice gratitude',
                            'Seek meaningful experiences',
                            'Connect with community',
                            'Find personal purpose'
                        ]
                    }
                }
            }
        };
        // Progress tracking
        let userProgress = {};

        // Initialize progress tracking
        function initializeProgress() {
            for (let categoryKey in skillData) {
                userProgress[categoryKey] = {
                    totalExp: 0,
                    level: 0,
                    skills: {}
                };

                for (let skillKey in skillData[categoryKey].skills) {
                    userProgress[categoryKey].skills[skillKey] = {
                        exp: 0,
                        level: 0,
                        completedSubSkills: []
                    };
                }
            }
        }

        // Calculate level based on experience
        function calculateLevel(exp) {
            return Math.floor(exp / 100);
        }

        // Calculate experience needed for next level
        function expToNextLevel(exp) {
            const currentLevel = calculateLevel(exp);
            const nextLevelExp = (currentLevel + 1) * 100;
            return nextLevelExp - exp;
        }

        // Show level up modal
        function showLevelUpModal(skillName, newLevel, categoryName = null) {
            const modal = document.getElementById('levelUpModal');
            const text = document.getElementById('levelUpText');
            
            if (categoryName) {
                text.textContent = `${categoryName} category reached level ${newLevel}!`;
            } else {
                text.textContent = `${skillName} skill reached level ${newLevel}!`;
            }
            
            modal.style.display = 'block';
        }

        // Close level up modal
        function closeLevelUpModal() {
            document.getElementById('levelUpModal').style.display = 'none';
        }

        // Handle sub-skill completion
        function toggleSubSkill(categoryKey, skillKey, subSkillIndex) {
            const skill = skillData[categoryKey].skills[skillKey];
            const subSkill = skill.subSkills[subSkillIndex];
            
            if (subSkill.completed) {
                return; // Already completed
            }

            // Mark as completed
            subSkill.completed = true;
            
            // Add experience
            const oldSkillLevel = userProgress[categoryKey].skills[skillKey].level;
            const oldCategoryLevel = userProgress[categoryKey].level;
            
            userProgress[categoryKey].skills[skillKey].exp += subSkill.exp;
            userProgress[categoryKey].totalExp += subSkill.exp;
            userProgress[categoryKey].skills[skillKey].completedSubSkills.push(subSkillIndex);
            
            // Update levels
            const newSkillLevel = calculateLevel(userProgress[categoryKey].skills[skillKey].exp);
            const newCategoryLevel = calculateLevel(userProgress[categoryKey].totalExp);
            
            userProgress[categoryKey].skills[skillKey].level = newSkillLevel;
            userProgress[categoryKey].level = newCategoryLevel;
            
            // Show level up modals
            if (newSkillLevel > oldSkillLevel) {
                setTimeout(() => showLevelUpModal(skill.name, newSkillLevel), 100);
            }
            
            if (newCategoryLevel > oldCategoryLevel) {
                setTimeout(() => showLevelUpModal(skill.name, newCategoryLevel, skillData[categoryKey].name), 500);
            }
            
            // Update UI
            updateSkillsDisplay(categoryKey);
            updateCategoriesDisplay();
        }

        // Display categories on main page
        function updateCategoriesDisplay() {
            const container = document.getElementById('categories');
            container.innerHTML = '';

            for (let categoryKey in skillData) {
                const category = skillData[categoryKey];
                const progress = userProgress[categoryKey];
                
                const card = document.createElement('div');
                card.className = 'category-card';
                card.onclick = () => showSkillsPage(categoryKey);
                
                card.innerHTML = `
                    <h2>${category.name}</h2>
                    <div class="category-level">Level ${progress.level}</div>
                    <div class="category-exp">${progress.totalExp} EXP</div>
                `;
                
                container.appendChild(card);
            }
        }

        // Show skills page for a category
        function showSkillsPage(categoryKey) {
            document.getElementById('main-page').style.display = 'none';
            document.getElementById('skills-page').style.display = 'block';
            document.getElementById('category-title').textContent = skillData[categoryKey].name;
            
            updateSkillsDisplay(categoryKey);
        }

        // Show main page
        function showMainPage() {
            document.getElementById('main-page').style.display = 'block';
            document.getElementById('skills-page').style.display = 'none';
        }

        // Update skills display
        function updateSkillsDisplay(categoryKey) {
            const container = document.getElementById('skills-grid');
            container.innerHTML = '';

            for (let skillKey in skillData[categoryKey].skills) {
                const skill = skillData[categoryKey].skills[skillKey];
                const progress = userProgress[categoryKey].skills[skillKey];
                
                const card = document.createElement('div');
                card.className = 'skill-card';
                
                const expPercent = (progress.exp % 100);
                const expToNext = expToNextLevel(progress.exp);
                
                card.innerHTML = `
                    <div class="skill-header" onclick="toggleSkillExpansion('${skillKey}')">
                        <div class="skill-title">${skill.name}</div>
                        <div class="skill-level">Level ${progress.level}</div>
                        <div class="expand-icon" id="expand-${skillKey}">‚ñº</div>
                    </div>
                    <div class="skill-exp">${progress.exp} EXP (${expToNext} to next level)</div>
                    <div class="exp-bar">
                        <div class="exp-fill" style="width: ${expPercent}%"></div>
                    </div>
                    <div class="sub-skills" id="subskills-${skillKey}">
                        ${skill.subSkills.map((subSkill, index) => `
                            <div class="sub-skill">
                                <input type="checkbox" 
                                       id="sub-${skillKey}-${index}" 
                                       ${subSkill.completed ? 'checked disabled' : ''}
                                       onchange="toggleSubSkill('${categoryKey}', '${skillKey}', ${index})">
                                <label for="sub-${skillKey}-${index}">${subSkill.name}</label>
                                <div class="sub-skill-exp">+${subSkill.exp} EXP</div>
                            </div>
                        `).join('')}
                    </div>
                `;
                
                container.appendChild(card);
            }
        }

        // Toggle skill expansion
        function toggleSkillExpansion(skillKey) {
            const subSkills = document.getElementById(`subskills-${skillKey}`);
            const icon = document.getElementById(`expand-${skillKey}`);
            
            subSkills.classList.toggle('expanded');
            icon.classList.toggle('rotated');
        }

        // Initialize the application
        initializeProgress();
        updateCategoriesDisplay();
    </script>
</body>
</html>
