<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Skill Tree</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            color: white;
            position: relative;
        }

        .header h1 {
            font-size: 3em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .nav-dropdown {
            position: absolute;
            top: 20px;
            right: 20px;
        }

        .dropdown-select {
            background: rgba(255,255,255,0.2);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 25px;
            font-size: 16px;
            cursor: pointer;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
            min-width: 200px;
        }

        .dropdown-select:hover {
            background: rgba(255,255,255,0.3);
        }

        .dropdown-select option {
            background: #667eea;
            color: white;
        }

        .back-btn {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(255,255,255,0.2);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        .back-btn:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-2px);
        }

        .categories {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-bottom: 40px;
        }

        .category-card {
            background: rgba(255,255,255,0.95);
            border-radius: 20px;
            padding: 30px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            backdrop-filter: blur(10px);
        }

        .category-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.3);
        }

        .category-card h2 {
            font-size: 2em;
            margin-bottom: 15px;
            color: #4a5568;
        }

        .category-level {
            font-size: 1.5em;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 10px;
        }

        .category-exp {
            color: #666;
            font-size: 1.1em;
        }

        .page {
            display: none;
        }

        .page.active {
            display: block;
        }

        .skills-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
        }

        .skill-card {
            background: rgba(255,255,255,0.95);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            transition: all 0.3s ease;
        }

        .skill-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.2);
        }

        .skill-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            cursor: pointer;
        }

        .skill-title {
            font-size: 1.4em;
            font-weight: bold;
            color: #4a5568;
        }

        .skill-level {
            background: #667eea;
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
        }

        .skill-exp {
            font-size: 0.9em;
            color: #666;
            margin-bottom: 15px;
        }

        .exp-bar {
            background: #e2e8f0;
            height: 8px;
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 15px;
        }

        .exp-fill {
            background: linear-gradient(90deg, #667eea, #764ba2);
            height: 100%;
            transition: width 0.5s ease;
        }

        .sub-skills {
            display: none;
            margin-top: 15px;
        }

        .sub-skills.expanded {
            display: block;
        }

        .sub-skill {
            display: flex;
            align-items: center;
            padding: 10px;
            margin: 5px 0;
            background: #f7fafc;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .sub-skill:hover {
            background: #edf2f7;
        }

        .sub-skill input[type="checkbox"] {
            margin-right: 10px;
            transform: scale(1.2);
        }

        .sub-skill label {
            flex: 1;
            cursor: pointer;
        }

        .sub-skill-exp {
            color: #667eea;
            font-weight: bold;
            font-size: 0.9em;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            animation: modalPop 0.5s ease;
        }

        @keyframes modalPop {
            from { transform: translate(-50%, -50%) scale(0.8); opacity: 0; }
            to { transform: translate(-50%, -50%) scale(1); opacity: 1; }
        }

        .modal h2 {
            color: #667eea;
            font-size: 2em;
            margin-bottom: 15px;
        }

        .modal p {
            font-size: 1.2em;
            color: #4a5568;
            margin-bottom: 20px;
        }

        .modal button {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            font-size: 1.1em;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .modal button:hover {
            background: #5a67d8;
            transform: translateY(-2px);
        }

        .expand-icon {
            font-size: 1.2em;
            transition: transform 0.3s ease;
            margin-left: 10px;
        }

        .expand-icon.rotated {
            transform: rotate(180deg);
        }

        .category-page-header {
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 20px;
            margin-bottom: 30px;
            text-align: center;
            color: white;
        }

        .category-stats {
            display: flex;
            justify-content: center;
            gap: 40px;
            margin-top: 15px;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #ffd700;
        }

        .stat-label {
            font-size: 1.1em;
            opacity: 0.9;
        }

        @media (max-width: 768px) {
            .nav-dropdown {
                position: static;
                text-align: center;
                margin-bottom: 20px;
            }

            .category-stats {
                flex-direction: column;
                gap: 20px;
            }
        }
    </style>
</head>
<body>
    <header>
        <nav>
            <ul>
                <li><a href="index.html">Home</a>/li>
                <li><a href="locations.html">locations</a>/li>
                <li><a href="contact.html">contact</a>/li>
            <ul>
        <nav>
        
        </div>

        <!-- Verbal-Linguistic Page -->
        <div id="verbal-linguistic-page" class="page">
            <div class="header">
                <h1>ðŸ“š Verbal-Linguistic Skills</h1>
                <div class="category-page-header">
                    <h2>Master the Art of Communication</h2>
                    <div class="category-stats">
                        <div class="stat-item">
                            <div class="stat-number" id="verbal-level">0</div>
                            <div class="stat-label">Level</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number" id="verbal-exp">0</div>
                            <div class="stat-label">Total EXP</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number" id="verbal-skills-completed">0</div>
                            <div class="stat-label">Skills Mastered</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="skills-grid" id="verbal-skills-grid">
                <!-- Skills will be populated by JavaScript -->
            </div>
        </div>

        <!-- Mathematical-Logical Page -->
        <div id="mathematical-logical-page" class="page">
            <div class="header">
                <h1>ðŸ”¢ Mathematical-Logical Skills</h1>
                <div class="category-page-header">
                    <h2>Master Logic and Problem Solving</h2>
                    <div class="category-stats">
                        <div class="stat-item">
                            <div class="stat-number" id="math-level">0</div>
                            <div class="stat-label">Level</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number" id="math-exp">0</div>
                            <div class="stat-label">Total EXP</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number" id="math-skills-completed">0</div>
                            <div class="stat-label">Skills Mastered</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="skills-grid" id="math-skills-grid">
                <!-- Skills will be populated by JavaScript -->
            </div>
        </div>
    </div>

    <!-- Level Up Modal -->
    <div id="levelUpModal" class="modal">
        <div class="modal-content">
            <h2>ðŸŽ‰ Congratulations!</h2>
            <p id="levelUpText"></p>
            <button onclick="closeLevelUpModal()">Continue</button>
        </div>
    </div>

    <script>
        // Data structure for skills and categories
        const skillData = {
            'verbal-linguistic': {
                name: 'Verbal-Linguistic',
                skills: {
                    'reading': {
                        name: 'Reading',
                        subSkills: [
                            { name: 'Read 10 books', exp: 50, completed: false },
                            { name: 'Read 25 books', exp: 75, completed: false },
                            { name: 'Read 50 books', exp: 100, completed: false },
                            { name: 'Read a classic novel', exp: 60, completed: false },
                            { name: 'Read non-fiction', exp: 40, completed: false }
                        ]
                    },
                    'writing': {
                        name: 'Writing',
                        subSkills: [
                            { name: 'Write daily journal', exp: 30, completed: false },
                            { name: 'Write a short story', exp: 80, completed: false },
                            { name: 'Write a poem', exp: 40, completed: false },
                            { name: 'Write an essay', exp: 60, completed: false },
                            { name: 'Start a blog', exp: 70, completed: false }
                        ]
                    },
                    'learn-language': {
                        name: 'Learn a New Language',
                        subSkills: [
                            { name: 'Choose target language', exp: 10, completed: false },
                            { name: 'Learn basic greetings', exp: 20, completed: false },
                            { name: 'Master 100 words', exp: 50, completed: false },
                            { name: 'Hold basic conversation', exp: 100, completed: false },
                            { name: 'Watch movie in target language', exp: 80, completed: false }
                        ]
                    },
                    'teaching': {
                        name: 'Teaching',
                        subSkills: [
                            { name: 'Explain concept to friend', exp: 30, completed: false },
                            { name: 'Create lesson plan', exp: 50, completed: false },
                            { name: 'Teach online tutorial', exp: 70, completed: false },
                            { name: 'Mentor someone', exp: 90, completed: false },
                            { name: 'Get teaching certification', exp: 120, completed: false }
                        ]
                    },
                    'acting': {
                        name: 'Acting',
                        subSkills: [
                            { name: 'Practice basic expressions', exp: 25, completed: false },
                            { name: 'Memorize monologue', exp: 50, completed: false },
                            { name: 'Join acting class', exp: 70, completed: false },
                            { name: 'Perform in local theater', exp: 100, completed: false },
                            { name: 'Create character backstory', exp: 60, completed: false }
                        ]
                    }
                }
            },
            'mathematical-logical': {
                name: 'Mathematical-Logical',
                skills: {
                    'basic-math': {
                        name: 'Basic Mathematics',
                        subSkills: [
                            { name: 'Master multiplication tables', exp: 30, completed: false },
                            { name: 'Solve algebraic equations', exp: 50, completed: false },
                            { name: 'Understand fractions', exp: 40, completed: false },
                            { name: 'Calculate percentages', exp: 35, completed: false },
                            { name: 'Work with decimals', exp: 35, completed: false }
                        ]
                    },
                    'geometry': {
                        name: 'Geometry',
                        subSkills: [
                            { name: 'Identify basic shapes', exp: 20, completed: false },
                            { name: 'Calculate area and perimeter', exp: 40, completed: false },
                            { name: 'Understand angles', exp: 45, completed: false },
                            { name: 'Work with triangles', exp: 60, completed: false },
                            { name: 'Master Pythagorean theorem', exp: 70, completed: false }
                        ]
                    },
                    'statistics': {
                        name: 'Statistics',
                        subSkills: [
                            { name: 'Calculate mean and median', exp: 30, completed: false },
                            { name: 'Understand probability', exp: 50, completed: false },
                            { name: 'Create graphs and charts', exp: 45, completed: false },
                            { name: 'Analyze data trends', exp: 70, completed: false },
                            { name: 'Conduct statistical test', exp: 90, completed: false }
                        ]
                    },
                    'programming': {
                        name: 'Programming',
                        subSkills: [
                            { name: 'Learn programming basics', exp: 40, completed: false },
                            { name: 'Write first program', exp: 60, completed: false },
                            { name: 'Understand loops and conditions', exp: 80, completed: false },
                            { name: 'Build a simple app', exp: 120, completed: false },
                            { name: 'Learn data structures', exp: 100, completed: false }
                        ]
                    },
                    'logic-puzzles': {
                        name: 'Logic Puzzles',
                        subSkills: [
                            { name: 'Solve sudoku puzzle', exp: 25, completed: false },
                            { name: 'Complete logic grid', exp: 40, completed: false },
                            { name: 'Master chess basics', exp: 70, completed: false },
                            { name: 'Solve riddles daily', exp: 30, completed: false },
                            { name: 'Complete escape room', exp: 80, completed: false }
                        ]
                    },
                    'financial-math': {
                        name: 'Financial Mathematics',
                        subSkills: [
                            { name: 'Calculate compound interest', exp: 40, completed: false },
                            { name: 'Understand loan payments', exp: 50, completed: false },
                            { name: 'Budget monthly expenses', exp: 35, completed: false },
                            { name: 'Learn investment basics', exp: 70, completed: false },
                            { name: 'File tax returns', exp: 60, completed: false }
                        ]
                    }
                }
            }
        };

        // Progress tracking - persists across pages
        let userProgress = {};

        // Current page
        let currentPage = 'home';

        // Initialize progress tracking
        function initializeProgress() {
            // Try to load from memory first
            const savedProgress = JSON.parse(JSON.stringify(userProgress));
            
            for (let categoryKey in skillData) {
                if (!userProgress[categoryKey]) {
                    userProgress[categoryKey] = {
                        totalExp: 0,
                        level: 0,
                        skills: {}
                    };
                }

                for (let skillKey in skillData[categoryKey].skills) {
                    if (!userProgress[categoryKey].skills[skillKey]) {
                        userProgress[categoryKey].skills[skillKey] = {
                            exp: 0,
                            level: 0,
                            completedSubSkills: []
                        };
                    }
                }
            }
        }

        // Calculate level based on experience
        function calculateLevel(exp) {
            return Math.floor(exp / 100);
        }

        // Calculate experience needed for next level
        function expToNextLevel(exp) {
            const currentLevel = calculateLevel(exp);
            const nextLevelExp = (currentLevel + 1) * 100;
            return nextLevelExp - exp;
        }

        // Show level up modal
        function showLevelUpModal(skillName, newLevel, categoryName = null) {
            const modal = document.getElementById('levelUpModal');
            const text = document.getElementById('levelUpText');
            
            if (categoryName) {
                text.textContent = `${categoryName} category reached level ${newLevel}!`;
            } else {
                text.textContent = `${skillName} skill reached level ${newLevel}!`;
            }
            
            modal.style.display = 'block';
        }

        // Close level up modal
        function closeLevelUpModal() {
            document.getElementById('levelUpModal').style.display = 'none';
        }

        // Handle sub-skill completion
        function toggleSubSkill(categoryKey, skillKey, subSkillIndex) {
            const skill = skillData[categoryKey].skills[skillKey];
            const subSkill = skill.subSkills[subSkillIndex];
            
            if (subSkill.completed) {
                return; // Already completed
            }

            // Mark as completed
            subSkill.completed = true;
            
            // Add experience
            const oldSkillLevel = userProgress[categoryKey].skills[skillKey].level;
            const oldCategoryLevel = userProgress[categoryKey].level;
            
            userProgress[categoryKey].skills[skillKey].exp += subSkill.exp;
            userProgress[categoryKey].totalExp += subSkill.exp;
            userProgress[categoryKey].skills[skillKey].completedSubSkills.push(subSkillIndex);
            
            // Update levels
            const newSkillLevel = calculateLevel(userProgress[categoryKey].skills[skillKey].exp);
            const newCategoryLevel = calculateLevel(userProgress[categoryKey].totalExp);
            
            userProgress[categoryKey].skills[skillKey].level = newSkillLevel;
            userProgress[categoryKey].level = newCategoryLevel;
            
            // Show level up modals
            if (newSkillLevel > oldSkillLevel) {
                setTimeout(() => showLevelUpModal(skill.name, newSkillLevel), 100);
            }
            
            if (newCategoryLevel > oldCategoryLevel) {
                setTimeout(() => showLevelUpModal(skill.name, newCategoryLevel, skillData[categoryKey].name), 500);
            }
            
            // Update all displays
            updateAllDisplays();
        }

        // Navigation function
        function navigateToPage() {
            const selector = document.getElementById('pageSelector');
            const selectedPage = selector.value;
            showPage(selectedPage);
        }

        // Show specific page
        function showPage(pageId) {
            // Hide all pages
            const pages = document.querySelectorAll('.page');
            pages.forEach(page => page.classList.remove('active'));
            
            // Show selected page
            document.getElementById(pageId + '-page').classList.add('active');
            
            // Update dropdown
            document.getElementById('pageSelector').value = pageId;
            
            currentPage = pageId;
            updateAllDisplays();
        }

        // Update all displays
        function updateAllDisplays() {
            updateCategoriesDisplay();
            updateCategoryPageStats('verbal-linguistic');
            updateCategoryPageStats('mathematical-logical');
            updateSkillsDisplay('verbal-linguistic');
            updateSkillsDisplay('mathematical-logical');
        }

        // Display categories on home page
        function updateCategoriesDisplay() {
            const container = document.getElementById('categories');
            if (!container) return;
            
            container.innerHTML = '';

            for (let categoryKey in skillData) {
                const category = skillData[categoryKey];
                const progress = userProgress[categoryKey];
                
                const card = document.createElement('div');
                card.className = 'category-card';
                card.onclick = () => showPage(categoryKey);
                
                card.innerHTML = `
                    <h2>${category.name}</h2>
                    <div class="category-level">Level ${progress.level}</div>
                    <div class="category-exp">${progress.totalExp} EXP</div>
                `;
                
                container.appendChild(card);
            }
        }

        // Update category page statistics
        function updateCategoryPageStats(categoryKey) {
            const progress = userProgress[categoryKey];
            const skillsCompleted = Object.values(progress.skills).filter(skill => skill.level > 0).length;
            
            // Update level
            const levelElement = document.getElementById(categoryKey === 'verbal-linguistic' ? 'verbal-level' : 'math-level');
            if (levelElement) levelElement.textContent = progress.level;
            
            // Update EXP
            const expElement = document.getElementById(categoryKey === 'verbal-linguistic' ? 'verbal-exp' : 'math-exp');
            if (expElement) expElement.textContent = progress.totalExp;
            
            // Update skills completed
            const skillsElement = document.getElementById(categoryKey === 'verbal-linguistic' ? 'verbal-skills-completed' : 'math-skills-completed');
            if (skillsElement) skillsElement.textContent = skillsCompleted;
        }

        // Update skills display for specific category page
        function updateSkillsDisplay(categoryKey) {
            const containerId = categoryKey === 'verbal-linguistic' ? 'verbal-skills-grid' : 'math-skills-grid';
            const container = document.getElementById(containerId);
            if (!container) return;
            
            container.innerHTML = '';

            for (let skillKey in skillData[categoryKey].skills) {
                const skill = skillData[categoryKey].skills[skillKey];
                const progress = userProgress[categoryKey].skills[skillKey];
                
                const card = document.createElement('div');
                card.className = 'skill-card';
                
                const expPercent = (progress.exp % 100);
                const expToNext = expToNextLevel(progress.exp);
                
                card.innerHTML = `
                    <div class="skill-header" onclick="toggleSkillExpansion('${categoryKey}-${skillKey}')">
                        <div class="skill-title">${skill.name}</div>
                        <div class="skill-level">Level ${progress.level}</div>
                        <div class="expand-icon" id="expand-${categoryKey}-${skillKey}">â–¼</div>
                    </div>
                    <div class="skill-exp">${progress.exp} EXP (${expToNext} to next level)</div>
                    <div class="exp-bar">
                        <div class="exp-fill" style="width: ${expPercent}%"></div>
                    </div>
                    <div class="sub-skills" id="subskills-${categoryKey}-${skillKey}">
                        ${skill.subSkills.map((subSkill, index) => `
                            <div class="sub-skill">
                                <input type="checkbox" 
                                       id="sub-${categoryKey}-${skillKey}-${index}" 
                                       ${subSkill.completed ? 'checked disabled' : ''}
                                       onchange="toggleSubSkill('${categoryKey}', '${skillKey}', ${index})">
                                <label for="sub-${categoryKey}-${skillKey}-${index}">${subSkill.name}</label>
                                <div class="sub-skill-exp">+${subSkill.exp} EXP</div>
                            </div>
                        `).join('')}
                    </div>
                `;
                
                container.appendChild(card);
            }
        }

        // Toggle skill expansion
        function toggleSkillExpansion(skillId) {
            const subSkills = document.getElementById(`subskills-${skillId}`);
            const icon = document.getElementById(`expand-${skillId}`);
            
            if (subSkills && icon) {
                subSkills.classList.toggle('expanded');
                icon.classList.toggle('rotated');
            }
        }

        // Initialize the application
        initializeProgress();
        updateAllDisplays();
    </script>
</body>
</html>
